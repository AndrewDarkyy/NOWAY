-- services
local runService = game:GetService("RunService")
local players = game:GetService("Players")

-- variables
local camera = game:GetService("Workspace").CurrentCamera
local viewportSize = camera.ViewportSize

-- locals
local round = math.round
local sin = math.sin
local cos = math.cos
local clear = table.clear
local unpack = table.unpack
local create = table.create
local fromMatrix = CFrame.fromMatrix

-- methods
local wtvp = camera.WorldToViewportPoint
local isA = game.IsA
local findFirstChild = game.FindFirstChild
local getChildren = game.GetChildren
local pointToObjectSpace = CFrame.identity.PointToObjectSpace
local min2 = Vector2.zero.Min
local max2 = Vector2.zero.Max
local min3 = Vector3.zero.Min
local max3 = Vector3.zero.Max

-- constants
local NAME_OFFSET = Vector2.new(0, 2)
local VERTICES = {
	Vector3.new(-1, -1, -1),
	Vector3.new(-1, 1, -1),
	Vector3.new(-1, 1, 1),
	Vector3.new(-1, -1, 1),
	Vector3.new(1, -1, -1),
	Vector3.new(1, 1, -1),
	Vector3.new(1, 1, 1),
	Vector3.new(1, -1, 1)
}

-- functions
local function isBodyPart(name)
	return name == "Head" or name:find("Torso") or name:find("Leg") or name:find("Arm")
end

local function getBoundingBox(parts)
	local min, max
	for i = 1, #parts do
		local part = parts[i]
		local cframe, size = part.CFrame, part.Size

		min = min3(min or cframe.Position, (cframe - size*0.5).Position)
		max = max3(max or cframe.Position, (cframe + size*0.5).Position)
	end

	local center = (min + max)*0.5
	local front = Vector3.new(center.X, center.Y, max.Z)
	return CFrame.new(center, front), max - min
end

local function worldToScreen(world)
	local screen, inBounds = wtvp(camera, world)
	return Vector2.new(screen.X, screen.Y), inBounds
end

local function calculateCorners(cframe, size)
	local corners = create(#VERTICES)
	for i = 1, #VERTICES do
		corners[i] = worldToScreen((cframe + size*0.5*VERTICES[i]).Position)
	end

	local min = min2(viewportSize, unpack(corners))
	local max = max2(Vector2.zero, unpack(corners))
	return {
		corners = corners,
		topLeft = Vector2.new(min.X, min.Y),
		topRight = Vector2.new(max.X, min.Y),
		bottomLeft = Vector2.new(min.X, max.Y),
		bottomRight = Vector2.new(max.X, max.Y)
	}
end

local function rotateVector(vector, radians)
	local x, y = vector.X, vector.Y
	local c, s = cos(radians), sin(radians)
	return Vector2.new(x*c - y*s, x*s + y*c)
end

-- esp object
local EspObject = {}
EspObject.__index = EspObject

function EspObject.new(player, interface)
	local self = setmetatable({}, EspObject)
	self.player = player
	self.interface = interface
	self:Construct()
	return self
end

function EspObject:_create(class, properties)
	local drawing = Drawing.new(class)
	for property, value in next, properties do
		pcall(function() drawing[property] = value end)
	end
	self.bin[#self.bin + 1] = drawing
	return drawing
end

function EspObject:Construct()
	self.charCache = {}
	self.childCount = 0
	self.bin = {}
	self.drawings = {
		visible = {
			boxOutline = self:_create("Square", { Thickness = 3, Visible = false }),
			box = self:_create("Square", { Thickness = 1, Visible = false }),
			name = self:_create("Text", { Text = self.player.DisplayName, Center = true, Visible = false })
		},
		hidden = {
			arrowOutline = self:_create("Triangle", { Thickness = 3, Visible = false }),
			arrow = self:_create("Triangle", { Filled = true, Visible = false })
		}
	}

	self.renderConnection = runService.Heartbeat:Connect(function(deltaTime)
		self:Update(deltaTime)
		self:Render(deltaTime)
	end)
end

function EspObject:Destruct()
	self.renderConnection:Disconnect()

	for i = 1, #self.bin do
		self.bin[i]:Remove()
	end

	clear(self)
end

function EspObject:Update()
	local interface = self.interface

	self.options = interface.teamSettings[isFriendly(self.player) and "friendly" or "enemy"]
	self.character = self.player.Character
	self.enabled = self.options.enabled and self.character

	local head = self.enabled and findFirstChild(self.character, "Head")
	if not head then
		self.charCache = {}
		self.onScreen = false
		return
	end

	local _, onScreen = worldToScreen(head.Position)
	self.onScreen = onScreen

	if self.onScreen then
		local cache = self.charCache
		local children = getChildren(self.character)
		if not cache[1] or self.childCount ~= #children then
			clear(cache)

			for i = 1, #children do
				local part = children[i]
				if isA(part, "BasePart") and isBodyPart(part.Name) then
					cache[#cache + 1] = part
				end
			end

			self.childCount = #children
		end

		self.corners = calculateCorners(getBoundingBox(cache))
	elseif self.options.offScreenArrow then
		local cframe = camera.CFrame
		local flat = fromMatrix(cframe.Position, cframe.RightVector, Vector3.yAxis)
		local objectSpace = pointToObjectSpace(flat, head.Position)
		self.direction = Vector2.new(objectSpace.X, objectSpace.Z).Unit
	end
end

function EspObject:Render()
	local onScreen = self.onScreen or false
	local enabled = self.enabled or false
	local visible = self.drawings.visible
	local hidden = self.drawings.hidden
	local interface = self.interface
	local options = self.options
	local corners = self.corners

	visible.box.Visible = enabled and onScreen and options.box
	visible.boxOutline.Visible = visible.box.Visible and options.boxOutline
	if visible.box.Visible then
		local box = visible.box
		box.Position = corners.topLeft
		box.Size = corners.bottomRight - corners.topLeft
		box.Color = options.boxColor[1]
		box.Transparency = options.boxColor[2]

		local boxOutline = visible.boxOutline
		boxOutline.Position = box.Position
		boxOutline.Size = box.Size
		boxOutline.Color = options.boxOutlineColor[1]
		boxOutline.Transparency = options.boxOutlineColor[2]
	end

	visible.name.Visible = enabled and onScreen and options.name
	if visible.name.Visible then
		local name = visible.name
		name.Size = 13
		name.Font = 2
		name.Color = options.nameColor[1]
		name.Transparency = options.nameColor[2]
		name.Outline = options.nameOutline
		name.OutlineColor = options.nameOutlineColor
		name.Position = (corners.topLeft + corners.topRight)*0.5 - Vector2.yAxis*name.TextBounds.Y - NAME_OFFSET
	end

	hidden.arrow.Visible = enabled and (not onScreen) and options.offScreenArrow
	hidden.arrowOutline.Visible = hidden.arrow.Visible and options.offScreenArrowOutline
	if hidden.arrow.Visible and self.direction then
		local arrow = hidden.arrow
		arrow.PointA = min2(max2(viewportSize*0.5 + self.direction*150, Vector2.one*25), viewportSize - Vector2.one*25)
		arrow.PointB = arrow.PointA - rotateVector(self.direction, 0.45)*15
		arrow.PointC = arrow.PointA - rotateVector(self.direction, -0.45)*15
		arrow.Color = options.offScreenArrowColor[1]
		arrow.Transparency = options.offScreenArrowColor[2]

		local arrowOutline = hidden.arrowOutline
		arrowOutline.PointA = arrow.PointA
		arrowOutline.PointB = arrow.PointB
		arrowOutline.PointC = arrow.PointC
		arrowOutline.Color = options.offScreenArrowOutlineColor[1]
		arrowOutline.Transparency = options.offScreenArrowOutlineColor[2]
	end
end

-- interface
local EspInterface = {
	_hasLoaded = false,
	_objectCache = {},
	teamSettings = {
		enemy = {
			enabled = false,
			box = false,
			boxColor = { Color3.new(1,0,0), 1 },
			boxOutline = true,
			boxOutlineColor = { Color3.new(), 1 },
			name = false,
			nameColor = { Color3.new(1,1,1), 1 },
			nameOutline = true,
			nameOutlineColor = Color3.new(),
			offScreenArrow = false,
			offScreenArrowColor = { Color3.new(1,1,1), 1 },
			offScreenArrowOutline = true,
			offScreenArrowOutlineColor = { Color3.new(), 1 },
			chamsFillColor = { Color3.new(0.2, 0.2, 0.2), 0.5 },
			chamsOutlineColor = { Color3.new(1,0,0), 0 },
		},
		friendly = {
			enabled = false,
			box = false,
			boxColor = { Color3.new(0,1,0), 1 },
			boxOutline = true,
			boxOutlineColor = { Color3.new(), 1 },
			name = false,
			nameColor = { Color3.new(1,1,1), 1 },
			nameOutline = true,
			nameOutlineColor = Color3.new(),
			offScreenArrow = false,
			offScreenArrowColor = { Color3.new(1,1,1), 1 },
			offScreenArrowOutline = true,
			offScreenArrowOutlineColor = { Color3.new(), 1 },
			chamsFillColor = { Color3.new(0.2, 0.2, 0.2), 0.5 },
			chamsOutlineColor = { Color3.new(0,1,0), 0 }
		}
	}
}

function EspInterface.Load()
	if EspInterface._hasLoaded then return end

	local function createObject(player)
		EspInterface._objectCache[player] = {
			EspObject.new(player, EspInterface)
		}
	end

	local function removeObject(player)
		local object = EspInterface._objectCache[player]
		if object then
			for i = 1, #object do
				object[i]:Destruct()
			end
			EspInterface._objectCache[player] = nil
		end
	end

	local plrs = players:GetPlayers()
	for i = 2, #plrs do
		createObject(plrs[i])
	end

	EspInterface.playerAdded = players.PlayerAdded:Connect(createObject)
	EspInterface.playerRemoving = players.PlayerRemoving:Connect(removeObject)
	EspInterface._hasLoaded = true
end

function EspInterface.Unload()
	if not EspInterface._hasLoaded then return end

	for index, object in next, EspInterface._objectCache do
		for i = 1, #object do
			object[i]:Destruct()
		end
		EspInterface._objectCache[index] = nil
	end

	EspInterface.playerAdded:Disconnect()
	EspInterface.playerRemoving:Disconnect()
	EspInterface._hasLoaded = false
end

return EspInterface
